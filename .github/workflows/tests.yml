name: Run Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  # Optionally enable manual workflow trigger
  workflow_dispatch:

jobs:
  backend-test:
    name: Run Backend Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          retention-days: 7

      - name: Calculate dynamic coverage threshold
        run: |
          # Get the number of commits
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "Total commits: $COMMIT_COUNT"

          # Calculate the dynamic threshold: 20% + 0.1% per commit, capped at 80%
          THRESHOLD=$(echo "20 + 0.1 * $COMMIT_COUNT" | bc)
          if (( $(echo "$THRESHOLD > 80" | bc -l) )); then
            THRESHOLD=80
          fi
          echo "Dynamic coverage threshold: $THRESHOLD%"
          echo "THRESHOLD=$THRESHOLD" >> $GITHUB_ENV

          # Get the current coverage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

          # Check if coverage is below the threshold
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Code coverage is below the dynamic threshold of $THRESHOLD%"
            exit 1
          fi

  frontend-test:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Install podman-compose
        run: |
          sudo pip3 install podman-compose

      - name: Build and start application
        run: |
          podman-compose -f docker-compose.yml -f docker-compose.override.yml up -d
          # Wait for the application to start
          echo "Waiting for the application to start..."
          # Try to connect to the application for up to 30 seconds
          timeout=30
          while ! curl -s http://localhost:8083 > /dev/null; do
            timeout=$((timeout - 1))
            if [ $timeout -le 0 ]; then
              echo "Timed out waiting for application to start"
              exit 1
            fi
            echo "Waiting for application to start... ($timeout seconds left)"
            sleep 1
          done
          echo "Application is up and running!"

      - name: Run Playwright tests
        run: npx playwright test --debug

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: |-
            *.png
            test-results/
          retention-days: 7