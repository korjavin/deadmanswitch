name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Optionally enable manual workflow trigger
  workflow_dispatch:

# Add permissions needed for GitHub container registry
permissions:
  contents: read
  packages: write
  actions: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.2
          args: --timeout=5m --issues-exit-code=1
          only-new-issues: false

  backend-test:
    name: Run Backend Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git rev-list

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go tool cover -func=coverage.txt

      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

      - name: Calculate dynamic coverage threshold
        run: |
          # Get the number of commits
          # Make sure we have the full history
          git fetch --prune --unshallow || true

          # Try to get the commit count
          COMMIT_COUNT=$(git rev-list --count HEAD)

          # If we still have a shallow clone or the count is 1, use a fallback
          if [ "$COMMIT_COUNT" = "1" ]; then
            # Fallback to a reasonable default
            COMMIT_COUNT=50
            echo "Could not determine accurate commit count, using default: $COMMIT_COUNT"
          else
            echo "Total commits: $COMMIT_COUNT"
          fi

          # Calculate the dynamic threshold: 20% + 0.1% per commit, capped at 80%
          THRESHOLD=$(echo "20 + 0.1 * $COMMIT_COUNT" | bc)
          if (( $(echo "$THRESHOLD > 80" | bc -l) )); then
            THRESHOLD=80
          fi
          echo "Dynamic coverage threshold: $THRESHOLD%"
          echo "THRESHOLD=$THRESHOLD" >> $GITHUB_ENV

          # Get the current coverage
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

          # Check if coverage is below the threshold
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Code coverage is below the dynamic threshold of $THRESHOLD%"
            exit 1
          fi

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [backend-test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          # Install Docker Compose v2
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          # Create docker-compose symlink for backward compatibility
          sudo ln -sf $DOCKER_CONFIG/cli-plugins/docker-compose /usr/local/bin/docker-compose
          # Verify installation
          docker compose version

      - name: Create image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/deadmanswitch
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=sha,format=short
            type=ref,event=tag

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Use buildx's built-in cache
          cache-from: type=gha
          cache-to: type=gha,mode=max

  frontend-test:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          # Install Docker Compose v2
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          # Create docker-compose symlink for backward compatibility
          sudo ln -sf $DOCKER_CONFIG/cli-plugins/docker-compose /usr/local/bin/docker-compose
          # Verify installation
          docker compose version
          docker-compose version

      - name: Pull image from GitHub Container Registry
        run: |
          # For pull requests, we can't push to GHCR, so we need to build locally
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Building image locally for pull request..."
            docker build -t ghcr.io/${{ github.repository_owner }}/deadmanswitch:test .
          else
            echo "Pulling image from GitHub Container Registry..."
            docker pull ghcr.io/${{ github.repository_owner }}/deadmanswitch:sha-$(echo ${{ github.sha }} | cut -c1-7)
            docker tag ghcr.io/${{ github.repository_owner }}/deadmanswitch:sha-$(echo ${{ github.sha }} | cut -c1-7) ghcr.io/${{ github.repository_owner }}/deadmanswitch:test
          fi

      - name: Run frontend tests
        run: |
          # Set CI environment variable
          export CI=true

          # Remove any existing network with the same name
          docker network rm deadmanswitch_default || true
          # Check if port 8082 is already in use
          if netstat -tuln | grep -q ':8082 '; then
            echo "Port 8082 is already in use. Checking what's using it:"
            lsof -i :8082 || true
            echo "Attempting to kill processes using port 8082..."
            fuser -k 8082/tcp || true
          fi

          # Create a fresh network for the containers
          docker network create deadmanswitch_default

          # Create a custom docker-compose override file for testing
          export TEST_RUN_ID=$(date +%s)
          cat > docker-compose.test-ci.yml << EOL
          version: '3'

          services:
            deadmanswitch:
              image: ghcr.io/${{ github.repository_owner }}/deadmanswitch:test
              environment:
                # Use a temporary database for testing
                - DBPath=/app/data/test_${TEST_RUN_ID}.db
                # Enable debug mode for testing
                - DEBUG=true
                - LOG_LEVEL=debug
                # For testing, we'll use a simple configuration without email verification
                - SMTP_HOST=
                - SMTP_PORT=
                - SMTP_USERNAME=
                - SMTP_PASSWORD=
                - SMTP_FROM=test@example.com
                # Use the default port inside the container
                - PORT=8080
                - BASE_DOMAIN=localhost:8082
                # Mock Telegram bot token for testing
                - TG_BOT_TOKEN=mock_token_for_testing_123456789
                # Admin user for testing
                - ADMIN_EMAIL=admin@example.com
                - ADMIN_PASSWORD=admin
                - CREATE_ADMIN_USER=true
              networks:
                - deadmanswitch_default

          networks:
            deadmanswitch_default:
              external: true
          EOL

          # Create a custom docker-compose.yml file with explicit network configuration
          cat > docker-compose.ci.yml << EOL
          version: '3'

          services:
            deadmanswitch:
              image: ghcr.io/${{ github.repository_owner }}/deadmanswitch:test
              ports:
                - "8082:8080"
              volumes:
                - ./data:/app/data
              environment:
                # Use the default port inside the container
                - PORT=8080
                # Required environment variables
                - BASE_DOMAIN=localhost:8082
                - TG_BOT_TOKEN=mock_token_for_testing_123456789
                - ADMIN_EMAIL=admin@example.com
                - ADMIN_PASSWORD=admin
                - CREATE_ADMIN_USER=true
              networks:
                - deadmanswitch_default

          networks:
            deadmanswitch_default:
              external: true
          EOL

          # Print the content of the compose files for debugging
          echo "\nContents of docker-compose.ci.yml:"
          cat docker-compose.ci.yml
          echo "\nContents of docker-compose.test-ci.yml:"
          cat docker-compose.test-ci.yml

          # Start the application with the test database using the image we just pulled
          echo "\nStarting containers..."
          docker compose -f docker-compose.ci.yml -f docker-compose.test-ci.yml up -d

          # List running containers
          echo "\nRunning containers:"
          docker ps -a

          # Check container logs to verify it started correctly
          echo "\nChecking container logs:"
          CONTAINER_ID=$(docker ps -a --filter name=deadmanswitch --format "{{.ID}}" | head -n 1)
          if [ -n "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          else
            echo "No container found with name containing 'deadmanswitch'"
          fi

          # Check if the application is listening on port 8080 inside the container
          echo "\nChecking if port 8080 is open inside the container:"
          # Alpine uses busybox, so we need to use different commands
          docker exec $CONTAINER_ID sh -c "netstat -tulpn 2>/dev/null | grep 8080 || (apk add --no-cache net-tools && netstat -tulpn | grep 8080)" || echo "Port 8080 not found in container"

          # Check if the application is accessible from inside the container
          echo "\nChecking if application is accessible from inside the container:"
          docker exec $CONTAINER_ID sh -c "command -v curl || apk add --no-cache curl" || true
          docker exec $CONTAINER_ID sh -c "curl -v http://localhost:8080/login" || echo "Failed to access application from inside container"

          # Check network connectivity from host to container
          echo "\nChecking network connectivity to container:"
          docker exec $CONTAINER_ID cat /etc/hosts
          echo "\nHost network configuration:"
          ip addr show
          echo "\nHost routing table:"
          ip route

          # Wait for the application to start
          echo "Waiting for application to start..."
          MAX_WAIT=120
          COUNTER=0

          while [ $COUNTER -lt $MAX_WAIT ]; do
            # Check if container is running
            if ! docker ps | grep -q deadmanswitch; then
              echo "Container is not running! Checking logs..."
              # Get the container ID more reliably
              CONTAINER_ID=$(docker ps -a --filter name=deadmanswitch --format "{{.ID}}" | head -n 1)
              if [ -n "$CONTAINER_ID" ]; then
                echo "Found container ID: $CONTAINER_ID"
                docker logs $CONTAINER_ID || true
              else
                echo "No container found with name containing 'deadmanswitch'"
                docker ps -a
              fi
              echo "Trying to restart container..."
              docker compose -f docker-compose.ci.yml -f docker-compose.test-ci.yml up -d
              sleep 5
            fi

            # Try to connect to the application with more debugging
            echo "Attempting to connect to http://localhost:8082/login..."
            CURL_OUTPUT=$(curl -v http://localhost:8082/login 2>&1)
            STATUS=$(echo "$CURL_OUTPUT" | grep -c "HTTP/1.1 200")

            echo "Curl output:"
            echo "$CURL_OUTPUT" | head -n 20

            if [ "$STATUS" -gt 0 ]; then
              echo "Application is ready! Got HTTP 200 response."
              break
            else
              echo "Application not ready yet. Status check failed."
              # Try the root path as well
              echo "Trying root path http://localhost:8082/..."
              curl -v http://localhost:8082/ 2>&1 | head -n 20
            fi

            COUNTER=$((COUNTER+1))
            echo "Waiting for application to start... ($((MAX_WAIT-COUNTER)) seconds left)"

            # Print more detailed status every 10 seconds
            if [ $((COUNTER % 10)) -eq 0 ]; then
              echo "Current container status:"
              docker ps
              echo "Checking container logs (last 10 lines):"
              # Get the container ID more reliably
              CONTAINER_ID=$(docker ps -a --filter name=deadmanswitch --format "{{.ID}}" | head -n 1)
              if [ -n "$CONTAINER_ID" ]; then
                docker logs --tail=10 $CONTAINER_ID || true
              else
                echo "No container found with name containing 'deadmanswitch'"
              fi
            fi

            sleep 1
          done

          # Check if we timed out
          if [ $COUNTER -eq $MAX_WAIT ]; then
            echo "Timed out waiting for application to start"
            # Get the container ID more reliably
            CONTAINER_ID=$(docker ps -a --filter name=deadmanswitch --format "{{.ID}}" | head -n 1)
            if [ -n "$CONTAINER_ID" ]; then
              docker logs $CONTAINER_ID || true
            else
              echo "No container found with name containing 'deadmanswitch'"
              docker ps -a
            fi
            docker ps
            exit 1
          fi

          # First check if the application is ready using Playwright
          echo "Checking application readiness with Playwright..."
          docker run --rm --network host -v $(pwd):/app -w /app mcr.microsoft.com/playwright:v1.52.0-jammy /bin/bash -c "cd /app/tests/frontend && npm install && node -e \"const { chromium } = require('@playwright/test'); (async () => { try { const browser = await chromium.launch(); const page = await browser.newPage(); console.log('Trying to access http://localhost:8082/login...'); await page.goto('http://localhost:8082/login', { timeout: 60000 }); console.log('Page loaded successfully!'); console.log('Page title:', await page.title()); console.log('Page content:', await page.content()); await page.screenshot({ path: '/app/app-ready.png' }); await browser.close(); process.exit(0); } catch (e) { console.error('Error:', e); process.exit(1); } })()\"" || true

          # Run the tests using the Playwright Docker image with CI-specific reporter
          docker run --rm --network host -v $(pwd):/app -w /app mcr.microsoft.com/playwright:v1.52.0-jammy /bin/bash -c "cd /app/tests/frontend && npm install && CI=true npx playwright test --reporter=list"
          TEST_EXIT_CODE=$?

          # Stop the containers
          docker compose -f docker-compose.ci.yml -f docker-compose.test-ci.yml down
          # Clean up the network
          docker network rm deadmanswitch_default || true

          exit $TEST_EXIT_CODE

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: |-
            *.png
            test-results/
          retention-days: 7
